from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from typing import List

from .. import models, schemas
from ..db import get_db

# Initialize router
router = APIRouter(
    prefix="/todos",  # All APIs in this file use the /todos prefix
    tags=["Todos"]  # Group these endpoints under "Todos" in the docs
)


# === 1. GET /todos ===
@router.get("/", response_model=List[schemas.Todo], summary="Retrieve all todos")
def read_todos(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    """
    Retrieve a list of todos.
    """
    todos = db.query(models.Todo).offset(skip).limit(limit).all()
    return todos


# === 2. POST /todos ===
@router.post("/", response_model=schemas.Todo, status_code=status.HTTP_201_CREATED, summary="Create a new todo")
def create_todo(todo: schemas.TodoCreate, db: Session = Depends(get_db)):
    """
    Create a new todo.
    - **title**: Todo title (required, <= 140 characters).
    """
    # Create SQLAlchemy model instance from the Pydantic schema
    db_todo = models.Todo(title=todo.title)

    # Add to the session
    print(db_todo)

    db.add(db_todo)

    print(db_todo)

    # --- MOST IMPORTANT LINE ---
    # Commit changes to the database
    db.commit()
    # -----------------------------

    # Refresh db_todo to load the ID generated by the database
    db.refresh(db_todo)

    # Return the newly created entity
    return db_todo


# === 3. PATCH /todos/{id} ===
@router.patch("/{id}", response_model=schemas.Todo, summary="Update a todo")
def update_todo(id: int, todo_update: schemas.TodoUpdate, db: Session = Depends(get_db)):
    """
    Update an existing todo by ID.
    You can update `title`, `done`, or both.
    """
    # Locate the todo in the database
    db_todo = db.query(models.Todo).get(id)

    # If not found, raise a 404 error
    if not db_todo:
        raise HTTPException(status_code=404, detail="Todo not found")

    # Extract data from the Pydantic model (only provided fields)
    update_data = todo_update.dict(exclude_unset=True)

    # Update each field
    for key, value in update_data.items():
        setattr(db_todo, key, value)

    # Add to the session (marks the instance as modified)
    db.add(db_todo)

    # --- IMPORTANT LINE ---
    # Commit the changes
    db.commit()
    # -----------------------

    # Refresh to load the latest state
    db.refresh(db_todo)

    # Return the updated todo
    return db_todo


# === 4. DELETE /todos/{id} ===
@router.delete("/{id}", status_code=status.HTTP_204_NO_CONTENT, summary="Delete a todo")
def delete_todo(id: int, db: Session = Depends(get_db)):
    """
    Delete a todo by ID.
    """
    db_todo = db.query(models.Todo).get(id)

    if not db_todo:
        raise HTTPException(status_code=404, detail="Todo not found")

    db.delete(db_todo)

    # --- IMPORTANT LINE ---
    # Commit the deletion
    db.commit()
    # -----------------------

    # Return status 204 (No Content)
    return
